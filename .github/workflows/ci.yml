name: CI Pipeline

# CI Pipeline: Runs on every push and PR
# - Linting and formatting checks
# - Unit and integration tests (80% coverage)
# - Security scanning
# - Docker image build
#
# For deployments, see:
# - .github/workflows/staging.yml (automatic on develop)
# - .github/workflows/deploy.yml (automatic on tags)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy

      - name: Run Black
        run: black --check .

      - name: Run Ruff
        run: ruff check .

      - name: Run MyPy
        run: mypy app --ignore-missing-imports
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: kr_leads_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/kr_leads_test
          REDIS_URL: redis://localhost:6379
          POSTGRES_PASSWORD: test_password
        run: |
          pytest tests/ -v -n auto --timeout=300 --cov=app/api --cov-report=xml --cov-report=html --cov-report=term --cov-fail-under=80

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            htmlcov
            coverage.xml
            .coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install bandit
        run: pip install bandit[toml]

      - name: Run Bandit
        run: bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true  # Load image into Docker daemon
          tags: kr-lead-scraper:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm kr-lead-scraper:${{ github.sha }} python --version

  staging-deploy-trigger:
    name: Trigger Staging Deployment
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Staging Deployment Notification
        run: |
          echo "ðŸš€ Triggering staging deployment..."
          echo "Branch: develop"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Staging deployment will be handled by staging.yml workflow."

  deploy:
    name: Deploy Notification
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deployment Ready
        run: |
          echo "âœ… All checks passed!"
          echo "ðŸ“¦ Docker image built successfully"
          echo "ðŸš€ Ready for deployment"
          echo ""
          echo "To deploy to production:"
          echo "  git tag v1.2.3"
          echo "  git push origin v1.2.3"
          echo ""
          echo "This will trigger the Production Deployment workflow."
          echo "See .github/workflows/deploy.yml for details."
