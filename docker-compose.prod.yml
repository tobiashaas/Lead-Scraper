version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: kr-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kr_leads}
      POSTGRES_USER: ${POSTGRES_USER:-kr_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kr_user} -d ${POSTGRES_DB:-kr_leads}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - kr-network

  redis:
    image: redis:7-alpine
    container_name: kr-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always
    networks:
      - kr-network

  ollama:
    image: ollama/ollama:latest
    container_name: kr-ollama-prod
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - kr-network
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kr-app-prod
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kr_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-kr_leads}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - OLLAMA_HOST=http://ollama:11434
      - ENVIRONMENT=production
      - DEBUG=False
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    networks:
      - kr-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: kr-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: always
    networks:
      - kr-network

volumes:
  postgres_data:
  redis_data:
  ollama_data:

networks:
  kr-network:
    driver: bridge
